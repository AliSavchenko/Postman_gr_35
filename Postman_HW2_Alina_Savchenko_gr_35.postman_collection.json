{
	"info": {
		"_postman_id": "77104b6c-b817-4801-964f-e353ff7f0f75",
		"name": "Postman_HW2_Alina_Savchenko_gr_35",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20441225"
	},
	"item": [
		{
			"name": "http://162.55.220.72:5005/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. http://162.55.220.72:5005/first",
							"//2. Отправить запрос.",
							"//3. Статус код 200",
							"//4. Проверить, что в body приходит правильный string.",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"//http://162.55.220.72:5005/user_info_3",
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//3. Спарсить response body в json.",
							"",
							"var jsonData = pm.response.json();",
							"",
							"//4. Проверить, что name в ответе равно name s request (name вбить руками.)",
							"",
							"pm.test(\"Your name is correct\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Alina\");",
							"});",
							"//5. Проверить, что age в ответе равно age s request (age вбить руками.)",
							"",
							"pm.test(\"Your age is correct\", function () {",
							"    pm.expect(jsonData.age).to.eql('34');",
							"});",
							"//6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)",
							"",
							"pm.test(\"Your salary is correct\", function () {",
							"    pm.expect(jsonData.salary).to.eql(2300);",
							"});",
							"//7. Спарсить request.",
							"",
							"var request = request.data;",
							"",
							"//8. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"var req_name = request.name;",
							"var resp_name = jsonData.name;",
							"",
							"pm.test(\"Request_response name equal\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"",
							"//9. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"var req_age = request.age;",
							"var resp_age = jsonData.age;",
							"",
							"pm.test(\"Request_response age equal\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"//10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"var req_salary = request.salary;",
							"var resp_salary = jsonData.salary;",
							"",
							"pm.test(\"Request_response salary equal\", function () {",
							"    pm.expect(resp_salary).to.eql(Number(req_salary));",
							"});",
							"",
							"//11. Вывести в консоль параметр family из response.",
							"",
							"console.log(jsonData.family)",
							"",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"",
							"var resp_u_sal_1_5 = jsonData.family.u_salary_1_5_year;",
							"var req_4 = request.salary * 4;",
							"",
							"pm.test(\"Request_response salary_1_5 equal\", function () {",
							"    pm.expect(resp_u_sal_1_5).to.eql(Number(req_4));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alina",
							"type": "text"
						},
						{
							"key": "age",
							"value": "34",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2300",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/object_info_3",
							"//1. Отправить запрос.",
							"//2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//3. Спарсить response body в json.",
							"    ",
							"    var jsonData = pm.response.json();",
							"",
							"//4. Спарсить request.",
							"",
							"    var request = pm.request.url.query.toObject();",
							"",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"    ",
							"    var resp_name = jsonData.name;",
							"    var req_name = request.name;",
							"pm.test(\"Name is correct\", function () {",
							"    pm.expect(resp_name).to.eql(req_name);",
							"});",
							"",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)",
							"",
							"    var resp_age = jsonData.age;",
							"    var req_age = request.age;",
							"pm.test(\"Age is correct\", function () {",
							"    pm.expect(resp_age).to.eql(req_age);",
							"});",
							"",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"",
							"    var resp_salary = jsonData.salary;",
							"    var req_salary = request.salary;",
							"pm.test(\"Salary is correct\", function () {",
							"    pm.expect(resp_salary).to.eql(Number(req_salary));",
							"});",
							"",
							"",
							"//8. Вывести в консоль параметр family из response.",
							"",
							"console.log(jsonData.family)",
							"",
							"//9. Проверить, что у параметра dog есть параметры name.",
							"",
							"pm.test(\"Dog_name\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")",
							"});",
							"",
							"//10. Проверить, что у параметра dog есть параметры age.",
							"",
							"pm.test(\"Dog_age\", function () {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")",
							"});",
							"",
							"//11. Проверить, что параметр name имеет значение Luky.",
							"",
							"pm.test(\"Dog_name_Luky\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\")",
							"});",
							"",
							"//12. Проверить, что параметр age имеет значение 4.",
							"",
							"pm.test(\"Dog_age_4\", function () {",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(Number(4))",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alina&age=34&salary=2300",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alina"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "2300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5005/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_4",
							"// 1. Отправить запрос.",
							"// 2. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// 3. Спарсить response body в json.",
							"",
							"    var jsonData = pm.response.json();",
							"",
							"// 4. Спарсить request.",
							"",
							"    var req = pm.request.url.query.toObject()",
							"",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)",
							"",
							"pm.test(\"Name is correct\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)",
							"",
							"pm.test(\"Age is correct\", function () {",
							"    pm.expect(jsonData.age).to.eql(Number(req.age));",
							"});",
							"",
							"// 7. Вывести в консоль параметр salary из request.",
							"",
							"console.log(req.salary)",
							"",
							"// 8. Вывести в консоль параметр salary из response.",
							"",
							"console.log(jsonData.salary)",
							"",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.",
							"",
							"console.log(jsonData.salary[0])",
							"",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"",
							"console.log(jsonData.salary[1])",
							"",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"",
							"console.log(jsonData.salary[2])",
							"",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"",
							"let resp_salary_0 = jsonData.salary[0];",
							"let req_salary = req.salary;",
							"",
							"pm.test(\"Salary[0]\", function () {",
							"    pm.expect(resp_salary_0).to.eql(Number(req_salary));",
							"});",
							"",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"",
							"let resp_salary_1 = Number(jsonData.salary[1]);",
							"let req_salary_1elem = Number(req.salary)*2;",
							"",
							"pm.test(\"Salary[1]\", function () {",
							"    pm.expect(resp_salary_1).to.eql(req_salary_1elem);",
							"});",
							"",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"",
							"let resp_salary_2 = Number(jsonData.salary[2]);",
							"let req_salary_2elem = Number(req.salary)*3;",
							"",
							"pm.test(\"Salary[2]\", function () {",
							"    pm.expect(resp_salary_2).to.eql(req_salary_2elem);",
							"});",
							"",
							"// 15. Создать в окружении переменную name",
							"",
							"let user_name = jsonData.name;",
							"",
							"// 16. Создать в окружении переменную age",
							"",
							"let user_age = jsonData.age;",
							"",
							"// 17. Создать в окружении переменную salary",
							"",
							"let user_salary = jsonData.salary[0];",
							"",
							"// 18. Передать в окружение переменную name",
							"",
							"pm.environment.set(\"name\", \"user_name\");",
							"",
							"",
							"// 19. Передать в окружение переменную age",
							"",
							"pm.environment.set(\"age\", \"user_age\");",
							"",
							"// 20. Передать в окружение переменную salary",
							"",
							"pm.environment.set(\"salary\", \"user_salary\");",
							"",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"",
							"let seriesSalary = jsonData.salary;",
							"seriesSalary.forEach(salary => console.log(salary));",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alina&age=34&salary=2300",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alina"
						},
						{
							"key": "age",
							"value": "34"
						},
						{
							"key": "salary",
							"value": "2300"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "http://162.55.220.72:5007/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//http://162.55.220.72:5005/user_info_2",
							"//1. Вставить параметр salary из окружения в request",
							"",
							"//Body => form-data => salary - {{salary}} ",
							"",
							"//2. Вставить параметр age из окружения в age",
							"",
							"//Body => form-data => age - {{age}} ",
							"",
							"//3. Вставить параметр name из окружения в name",
							"",
							"//Body => form-data => name - {{name}} ",
							"",
							"//4. Отправить запрос.",
							"//5. Статус код 200",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"//6. Спарсить response body в json.",
							"",
							"var jsonData = pm.response.json();",
							"",
							"//7. Спарсить request.",
							"",
							"var request = request.data",
							"",
							"//8. Проверить, что json response имеет параметр start_qa_salary",
							"",
							"pm.test(\"check start_qa_salary is correct\", function () {",
							"    pm.expect(jsonData).to.have.property (\"start_qa_salary\");",
							"});",
							"",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months",
							"",
							"pm.test(\"check qa_salary_after_6_months is correct\", function () {",
							"    pm.expect(jsonData).to.have.property (\"qa_salary_after_6_months\");",
							"});",
							"",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months",
							"",
							"pm.test(\"check qa_salary_after_12_months is correct\", function () {",
							"    pm.expect(jsonData).to.have.property (\"qa_salary_after_12_months\");",
							"});",
							"",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"",
							"pm.test(\"check qa_salary_after_1.5_year is correct\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"",
							"pm.test(\"check qa_salary_after_3.5_years is correct\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"",
							"//13. Проверить, что json response имеет параметр person",
							"",
							"pm.test(\"check person is correct\", function () {",
							"    pm.expect(jsonData).to.have.property (\"person\");",
							"});",
							"",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"",
							"let request_salary = request.salary;",
							"let start_qa_salary = jsonData.start_qa_salary",
							"",
							"pm.test(\"Check params start_qa_salary = salary\", function () {",
							"    pm.expect(+start_qa_salary).to.eql(+request_salary);",
							"});",
							"",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"",
							"",
							"let qa_salary_after_6_months = jsonData.qa_salary_after_6_months",
							"",
							"pm.test(\"Check params qa_salary_after_6_months = salary\", function () {",
							"    pm.expect(+qa_salary_after_6_months).to.eql(+request_salary * 2);",
							"});",
							"",
							"",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"",
							"let qa_salary_after_12_months = jsonData.qa_salary_after_12_months",
							"",
							"pm.test(\"Check params qa_salary_after_12_months = salary\", function () {",
							"    pm.expect(+qa_salary_after_12_months).to.eql(+request_salary * 2.7);",
							"});",
							"",
							"",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"",
							"let qa_salary_after_1_5_year = jsonData['qa_salary_after_1.5_year']",
							"",
							"pm.test(\"Check params qa_salary_after_1.5_year = salary\", function () {",
							"    pm.expect(qa_salary_after_1_5_year).to.eql(request_salary * 3.3);",
							"});",
							"",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"",
							"let qa_salary_after_3_5_years = jsonData['qa_salary_after_3.5_years']",
							"",
							"pm.test(\"Check params qa_salary_after_3.5_year = salary\", function () {",
							"    pm.expect(qa_salary_after_3_5_years).to.eql(request_salary * 3.8);",
							"});",
							"",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"",
							"let u_name_1elem = jsonData.person.u_name[1]",
							"",
							"pm.test(\"Check params u_name_1elem = salary\", function () {",
							"    pm.expect(u_name_1elem).to.eql(+request_salary);",
							"});",
							"",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"",
							"let u_age = jsonData.person.u_age",
							"let request_age = request.age",
							"",
							"pm.test(\"Check params u_age = salary\", function () {",
							"    pm.expect(u_age).to.eql(+request_age);",
							"});",
							"",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"",
							"let u_salary_5_years = jsonData.person.u_salary_5_years",
							"",
							"pm.test(\"Check params u_salary_5_years = salary\", function () {",
							"    pm.expect(u_salary_5_years).to.eql(request_salary * 4.2);",
							"});",
							"",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"",
							"for (let item in jsonData.person) {",
							"  if(jsonData.person.hasOwnProperty(item)){",
							"    console.log(item)",
							"  }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5007/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "name",
			"value": "",
			"type": "string"
		},
		{
			"key": "salary",
			"value": "",
			"type": "string"
		},
		{
			"key": "age",
			"value": "",
			"type": "string"
		}
	]
}